#!/usr/bin/env groovy
pipeline {
    options {
        disableConcurrentBuilds()
    }

    parameters {
        string(name: 'LABEL', defaultValue: params.LABEL ?: 'macos-arm64', description: 'Node label to run on')

        string(name: 'GIT_SHA', defaultValue: params.GIT_REVISION ?: '*/main', description: 'Git commit to build.')

        string(name: 'BUILD_TYPE', defaultValue: params.BUILD_TYPE ?: 'Release', description: 'Default CMake build type; one of: Release, Debug, ...')

        booleanParam(name: 'CLEAN', defaultValue: params.CLEAN ?: false, description: 'Wipe the build directory?')
    }

    agent {
        node {
            label params.LABEL
        }
    }
    stages {
        stage('Print Machine Info') {
            environment {
               PATH="$PATH:/usr/bin:/usr/local/bin"
            }
            steps {
                sh '''
                sw_vers
                xcodebuild -version
                cmake --version
                python3 --version
                '''
            }
        }
        stage('Checkout') {
            steps {
                timeout(30) {
                    dir('llvm-project') {
                        checkout([$class: 'GitSCM', branches: [
                            [name: params.GIT_SHA]
                        ], userRemoteConfigs: [
                            [url: 'https://github.com/llvm/llvm-project.git']
                        ], extensions: [
                            [$class: 'CloneOption',
                            noTags: true, timeout: 30]
                        ]])
                    }
                    dir('llvm-zorg') {
                        checkout([$class: 'GitSCM', branches: [
                            [name: '*/main']
                        ], userRemoteConfigs: [
                            [url: 'https://github.com/llvm/llvm-zorg.git']
                        ], extensions: [
                            [$class: 'CloneOption',
                            reference: '/Users/Shared/llvm-zorg.git']
                        ]])
                    }
                }
            }
        }
        stage('Setup Venv') {
            environment {
               PATH="$PATH:/usr/bin:/usr/local/bin:/opt/homebrew/bin/"
            }
            steps {
                sh '''
                   # Non-incremental, so always delete just in case.
                   rm -rf clang-build clang-install host-compiler *.tar.gz
                   rm -rf venv
                   python3 -m venv venv
                   set +u
                   source ./venv/bin/activate
                   pip install -r ./llvm-zorg/zorg/jenkins/jobs/requirements.txt
                   set -u
               '''
            }
        }
        stage('Build') {
            environment {
               PATH="$PATH:/usr/bin:/usr/local/bin:/opt/homebrew/bin/"
            }
            steps {
                timeout(240) {
                    sh '''
                    set -u
                    rm -rf build.properties
                    source ./venv/bin/activate

                    cd llvm-project
                    git tag -a -m "First Commit" first_commit 97724f18c79c7cc81ced24239eb5e883bf1398ef || true

                    git_desc=$(git describe --match "first_commit")

                    export GIT_DISTANCE=$(echo ${git_desc} | cut -f 2 -d "-")

                    sha=$(echo ${git_desc} | cut -f 3 -d "-")
                    export GIT_SHA=${sha:1}

                    cd -

                    rm -rf lldb-build/bin/debugserver
                    # Running too many asanified threads is too stressful for the kernel and we get >90% system time.
                    export MAX_PARALLEL_TESTS=$(sysctl hw.physicalcpu |awk '{print int(($2+1)/2)}')

                    python3 llvm-zorg/zorg/jenkins/monorepo_build.py lldb-cmake-sanitized build \
                      --assertions \
                      --projects="clang;lld;lldb"  \
                      --runtimes="libunwind" \
                      --cmake-type=Release
                    '''
                    script {
                        def LLDB = new org.swift.LLDB()
                        LLDB.LLDB_prepare()
                    }
                }
            }
        }
        stage('Clean Test Results') {
            environment {
                PATH="$PATH:/usr/bin:/usr/local/bin:/opt/homebrew/bin/"
            }
            steps {
                timeout(10) {
                    sh '''
                    set -u

                    rm -rf test/results.xml
                    '''
                }
            }
        }
        stage('Test') {
            environment {
               PATH="$PATH:/usr/bin:/usr/local/bin"
            }
            steps {
                timeout(240) {
                    sh '''
                    set -u

                    source ./venv/bin/activate

                    rm -rf test/results.xml

                    python3 llvm-zorg/zorg/jenkins/monorepo_build.py lldb-cmake-sanitized test
                    '''
                }
            }
        }
    }

    post {
        always {
            // ToDo: Restore issue scanner
            // scanForIssues tool: clang()
            script {
                def Junit = new org.swift.Junit()
                Junit.safeJunit([
                    testResults: 'test/results.xml'
                ])
            }
        }
    }
}
