pipeline {
    agent { label 'green-dragon-08' }

    parameters {
        string(name: 'GIT_REVISION', defaultValue: '*/main', description: 'Git revision to build')
    }

    stages {
        stage('Checkout') {
            steps {
                dir('llvm-project') {
                    checkout([$class: 'GitSCM', branches: [[name: params.GIT_REVISION]], userRemoteConfigs: [[url: 'https://github.com/llvm/llvm-project.git']]])
                }
                dir('llvm-zorg') {
                    checkout([$class: 'GitSCM', branches: [[name: '*/main']], userRemoteConfigs: [[url: 'https://github.com/llvm/llvm-zorg.git']]])
                }
            }
        }
        stage('Build') {
            steps {
                timeout(90) {
                    sh '''
                    set -u

                    cd llvm-project
                    git tag -a -m "First Commit" first_commit 97724f18c79c7cc81ced24239eb5e883bf1398ef || true

                    git_desc=$(git describe --match "first_commit")
                    export GIT_DISTANCE=$(echo ${git_desc} | cut -f 2 -d "-")

                    sha=$(echo ${git_desc} | cut -f 3 -d "-")
                    export GIT_SHA=${sha:1}

                    cd -

                    export PATH=$PATH:/usr/bin:/usr/local/bin

                    # Set a MacOS minimum deployment target
                    export MACOSX_DEPLOYMENT_TARGET=10.9

                    rm -rf clang-install *.tar.gz
                    python llvm-zorg/zorg/jenkins/monorepo_build.py cmake build \
                      --assertions --cmake-type=RelWithDebInfo \
                      --projects="clang;clang-tools-extra;compiler-rt"
                    '''
                }
            }
        }
        stage('Test') {
            steps {
                timeout(90) {
                    sh '''
                    set -u
                    export PATH=$PATH:/usr/bin:/usr/local/bin

                    export SANITIZER_IOSSIM_TEST_DEVICE_IDENTIFIER='iPhone 12'

                    COMPILER_RT_TEST_DIR="${WORKSPACE}/clang-build/tools/clang/runtime/compiler-rt-bins/test"

                    cd $COMPILER_RT_TEST_DIR/asan && python3 ${WORKSPACE}/clang-build/./bin/llvm-lit \
                      --xunit-xml-output=testresults-asan-IOSSimX86_64Config.xunit.xml -v -vv --timeout=600 \
                      $COMPILER_RT_TEST_DIR/asan/IOSSimX86_64Config/

                    cd $COMPILER_RT_TEST_DIR/tsan && python3 ${WORKSPACE}/clang-build/./bin/llvm-lit \
                      --xunit-xml-output=testresults-tsan-IOSSimX86_64Config.xunit.xml -v -vv --timeout=600 \
                      $COMPILER_RT_TEST_DIR/tsan/IOSSimX86_64Config/

                    cd $COMPILER_RT_TEST_DIR/ubsan && python3 ${WORKSPACE}/clang-build/./bin/llvm-lit \
                      --xunit-xml-output=testresults-ubsan-AddressSanitizer-iossim-x86_64.xunit.xml -v -vv --timeout=600 \
                      $COMPILER_RT_TEST_DIR/ubsan/AddressSanitizer-iossim-x86_64/

                    cd $COMPILER_RT_TEST_DIR/ubsan && python3 ${WORKSPACE}/clang-build/./bin/llvm-lit \
                      --xunit-xml-output=testresults-ubsan-Standalone-iossim-x86_64.xunit.xml -v -vv --timeout=600 \
                      $COMPILER_RT_TEST_DIR/ubsan/Standalone-iossim-x86_64/

                    cd $COMPILER_RT_TEST_DIR/ubsan && python3 ${WORKSPACE}/clang-build/./bin/llvm-lit \
                      --xunit-xml-output=testresults-ubsan-ThreadSanitizer-iossim-x86_64.xunit.xml -v -vv --timeout=600 \
                      $COMPILER_RT_TEST_DIR/ubsan/ThreadSanitizer-iossim-x86_64/
                    '''
                }
                junit 'clang-build/**/testresults-*.xunit.xml'
            }
        }
    }
    post {
        success {
            scanForIssues tool: clang()
        }
        regression {
            emailext subject: '$DEFAULT_SUBJECT',
                    presendScript: '$DEFAULT_PRESEND_SCRIPT',
                    postsendScript: '$DEFAULT_POSTSEND_SCRIPT',
                    recipientProviders: [
                            [$class: 'CulpritsRecipientProvider'],
                            [$class: 'DevelopersRecipientProvider'],
                            [$class: 'RequesterRecipientProvider'],
                    ],
                    replyTo: '$DEFAULT_REPLYTO',
                    to: '$DEFAULT_RECIPIENTS',
                    body:'$DEFAULT_CONTENT'
        }
    }
}
