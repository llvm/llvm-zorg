#!/usr/bin/env groovy
pipeline {
    options {
        disableConcurrentBuilds()
    }

    parameters {
        string(name: 'LABEL', defaultValue: params.LABEL ?: 'macos-x86_64', description: 'Node label to run on')

        string(name: 'GIT_SHA', defaultValue: params.GIT_REVISION ?: '*/main', description: 'Git commit to build.')

        string(name: 'BUILD_TYPE', defaultValue: params.BUILD_TYPE ?: 'Release', description: 'Default CMake build type; one of: Release, Debug, ...')

        booleanParam(name: 'CLEAN', defaultValue: params.CLEAN ?: false, description: 'Wipe the build directory?')
    }

    agent {
        node {
            label params.LABEL
        }
    }
    stages {
        stage('Print Machine Info') {
            environment {
               PATH="$PATH:/usr/bin:/usr/local/bin"
            }
            steps {
                sh '''
                sw_vers
                xcodebuild -version
                cmake --version
                python3 --version
                '''
            }
        }
        stage('Checkout') {
            steps {
                timeout(30) {
                    dir('llvm-project') {
                        checkout([$class: 'GitSCM', branches: [
                            [name: params.GIT_SHA]
                        ], userRemoteConfigs: [
                            [url: 'https://github.com/llvm/llvm-project.git']
                        ], extensions: [
                            [$class: 'CloneOption',
                            noTags: true, timeout: 30]
                        ]])
                    }
                    dir('llvm-zorg') {
                        checkout([$class: 'GitSCM', branches: [
                            [name: '*/main']
                        ], userRemoteConfigs: [
                            [url: 'https://github.com/llvm/llvm-zorg.git']
                        ], extensions: [
                            [$class: 'CloneOption',
                            reference: '/Users/Shared/llvm-zorg.git']
                        ]])
                    }
                }
            }
        }
        stage('Setup Venv') {
            environment {
               PATH="$PATH:/usr/bin:/usr/local/bin"
            }
            steps {
                sh '''
                   # Non-incremental, so always delete.
                   rm -rf venv
                   python3 -m venv venv
                   set +u
                   source ./venv/bin/activate
                   pip install -r ./llvm-zorg/zorg/jenkins/jobs/requirements.txt
                   set -u
               '''
            }
        }
        stage('Build') {
            environment {
               PATH="$PATH:/usr/bin:/usr/local/bin"
            }
            steps {
                timeout(120) {
                    sh '''
                    set -u
                    rm -rf build.properties
                    source ./venv/bin/activate

                    cd llvm-project
                    git tag -a -m "First Commit" first_commit 97724f18c79c7cc81ced24239eb5e883bf1398ef || true

                    git_desc=$(git describe --match "first_commit")

                    export GIT_DISTANCE=$(echo ${git_desc} | cut -f 2 -d "-")
                    export LLVM_REV=$(git show -q | grep "llvm-svn:" | cut -f2 -d":" | tr -d " ")

                    sha=$(echo ${git_desc} | cut -f 3 -d "-")
                    export GIT_SHA=${sha:1}

                    cd -

                    rm -rf lldb-build/bin/debugserver
                    export MAX_PARALLEL_TESTS=$(sysctl hw.physicalcpu |awk '{print $2}')
                    python3 llvm-zorg/zorg/jenkins/monorepo_build.py lldb-cmake build \
                      --assertions \
                      --projects="clang;lld;lldb;cross-project-tests"  \
                      --runtimes="libcxx;libcxxabi;compiler-rt;libunwind"  \
                      --compiler-flag="-Wdocumentation" \
                      --cmake-type=Release || (echo "Retrying. debuginfo-tests may have failed due to high load."; sleep 30; python3 llvm-zorg/zorg/jenkins/monorepo_build.py lldb-cmake build \
                      --assertions \
                      --projects="clang;lld;lldb;cross-project-tests"  \
                      --runtimes="libcxx;libcxxabi;compiler-rt;libunwind"  \
                      --compiler-flag="-Wdocumentation" \
                      --cmake-type=Release)

                    export INSTALL_DIR=lldb-install
                    python3 llvm-zorg/zorg/jenkins/monorepo_build.py lldb-cmake install
                    '''

                    script {
                        def LLDB = new org.swift.LLDB()
                        LLDB.LLDB_prepare("lldb-install/bin/debugserver")
                        LLDB.LLDB_prepare("lldb-build/bin/debugserver")
                    }
                }
            }
        }
        stage('Clean Test Results') {
            environment {
               PATH="$PATH:/usr/bin:/usr/local/bin"
            }
            steps {
                timeout(10) {
                    sh '''
                    set -u
                    source ./venv/bin/activate

                    rm -rf test/results.xml
                    '''
                }
            }
        }
        stage('Test (Debug Info)') {
            environment {
               PATH="$PATH:/usr/bin:/usr/local/bin"
            }
            steps {
                timeout(30) {
                    // We want to continue with the rest of the pipeline even
                    // if the "Debug Info" tests fail, so catch the error but
                    // label this stage and the whole pipeline as FAILURE.
                    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                        sh '''
                        set -u
                        source ./venv/bin/activate

                        export MAX_PARALLEL_TESTS=$(sysctl hw.physicalcpu |awk '{print $2}')

                        python3 llvm-zorg/zorg/jenkins/monorepo_build.py lldb-cmake-debuginfo test
                        '''
                    }
                }
            }
        }
        stage('Test (LLDB)') {
            environment {
               PATH="$PATH:/usr/bin:/usr/local/bin"
            }
            steps {
                timeout(90) {
                    sh '''
                    set -u
                    source ./venv/bin/activate

                    export MAX_PARALLEL_TESTS=$(sysctl hw.physicalcpu |awk '{print $2}')
                    python3 llvm-zorg/zorg/jenkins/monorepo_build.py lldb-cmake test
                    '''
                }
            }
        }
        stage('Upload artifacts (LLDB)') {
            environment {
               PATH="$PATH:/usr/bin:/usr/local/bin"
            }
           steps {
               timeout(90) {
                   withCredentials([string(credentialsId: 's3_resource_bucket', variable: 'S3_BUCKET')]) {
                       sh '''
                       set -u
                       source ./venv/bin/activate

                       cd llvm-project
                       git_desc=$(git describe --match "first_commit")

                       export GIT_DISTANCE=$(echo ${git_desc} | cut -f 2 -d "-")

                       sha=$(echo ${git_desc} | cut -f 3 -d "-")
                       export GIT_SHA=${sha:1}

                       # Also save the LLVM_REV until LNT server is taught about GIT
                       export LLVM_REV=$(git show -q | grep "llvm-svn:" | cut -f2 -d":" | tr -d " ")

                       export INSTALL_DIR=lldb-install

                       cd -

                       python3 llvm-zorg/zorg/jenkins/monorepo_build.py artifact
                       '''
                   }
              }
          }
       }
    }
    post {
        always {
            // ToDo: Restore the issue scanner
            // scanForIssues tool: clang()
            junit 'test/results.xml'
        }
    }
}
