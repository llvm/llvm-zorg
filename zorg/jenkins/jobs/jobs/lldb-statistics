#!/usr/bin/env groovy

// This pipeline collects LLDB metrics by attaching LLDB to stable a
// version of clang-19/lldb-19, run various LLDB commands and then
// dump LLDB statistics.

// These are the LLVM build directories involved:
//
// (a) The "host" compiler/LLDB is taken from whatever the LLDB incremental built/used.
//     The metrics we collect are from that "host" LLDB that we fetched. Throughout this
//     file it is commonly referred to as 'host-compiler' or 'HOST_BUILD_DIR'.
//
// (b) The debugger/compiler that we're debugging as part of metrics collection is pinned to
//     the llvm-19.x release and is supposed to be unchanging across runs of this job.
//     Throughout this file we refer to it as "historic" or 'clang-19'. We build this
//     historic compiler build because we want improvements in the compiler to reflect
//     in the benchmarks.
//
// (c) We use the compiler from (a) to build the "historic" Clang/LLDB.
//
// (d) The compiler compiling the debugger in (a) is the Clang produced by the clang-stage2
//     buildbot and happens outside the purview job.
//
// In summary, the only stable version of Clang/LLVM is the one we use as the inferior during
// metrics collection.

pipeline {
    options {
        disableConcurrentBuilds()

        timeout(time: 12, unit: 'HOURS')
    }

    parameters {
        string(name: 'LABEL', defaultValue: params.LABEL ?: 'macos-x86_64', description: 'Node label to run on')
        string(name: 'GIT_SHA', defaultValue: params.GIT_REVISION ?: '*/release/19.x', description: 'Git commit to build.')
        string(name: 'ARTIFACT', defaultValue: params.ARTIFACT ?: 'lldb-cmake/latest', description: 'Clang/LLDB artifact to use')
        booleanParam(name: 'CLEAN', defaultValue: params.CLEAN ?: false, description: 'Wipe the build directory?')
    }

    agent {
        node {
            label params.LABEL
        }
    }
    stages {
        stage('Print Machine Info') {
            environment {
               PATH="$PATH:/usr/bin:/usr/local/bin"
            }
            steps {
                sh '''
                sw_vers
                xcodebuild -version
                cmake --version
                python3 --version
                '''
            }
        }
        stage('Checkout') {
            steps {
                script {
                    if(params.CLEAN) {
                        deleteDir()
                    }
                }

                timeout(30) {
                    dir('src/clang-19') {
                        checkout([$class: 'GitSCM', branches: [
                            [name: params.GIT_SHA]
                        ], userRemoteConfigs: [
                            [url: 'https://github.com/llvm/llvm-project.git']
                        ], extensions: [
                            [$class: 'CloneOption',
                            noTags: true, timeout: 30]
                        ]])
                    }
                    dir('llvm-zorg') {
                        checkout([$class: 'GitSCM', branches: [
                            [name: '*/main']
                        ], userRemoteConfigs: [
                            [url: 'https://github.com/llvm/llvm-zorg.git']
                        ]])
                    }
                }
            }
        }
        stage('Setup Venv') {
            environment {
               PATH="$PATH:/usr/bin:/usr/local/bin"
            }
            steps {
                sh '''
                   rm -rf venv
                   python3 -m venv venv
                   set +u
                   source ./venv/bin/activate
                   pip install -r ./llvm-zorg/zorg/jenkins/jobs/requirements.txt
                   set -u
               '''
            }
        }
        stage('Fetch Artifact') {
            environment {
               PATH="$PATH:/usr/bin:/usr/local/bin"
            }
            steps {
                withCredentials([string(credentialsId: 's3_resource_bucket', variable: 'S3_BUCKET')]) {
                    sh """
                        source ./venv/bin/activate
                        echo "ARTIFACT=${params.ARTIFACT}"
                        python llvm-zorg/zorg/jenkins/monorepo_build.py fetch
                        ls $WORKSPACE/host-compiler/lib/clang/
                        VERSION=`ls $WORKSPACE/host-compiler/lib/clang/`
                    """
                }
                script {
                  def LLDB = new org.swift.LLDB()
                  LLDB.LLDB_prepare("host-compiler/bin/debugserver")
                }
            }
        }
        stage('Build (historic)') {
            environment {
               PATH="$PATH:/usr/bin:/usr/local/bin"
               SRC="$WORKSPACE/src"
               BUILD="$WORKSPACE/clang-19-build"
               HOST_BUILD="$WORKSPACE/clang-19-build"
               HISTORIC_COMPILER="clang-19"
               CC="$WORKSPACE/host-compiler/bin/clang"
               CXX="$WORKSPACE/host-compiler/bin/clang++"
            }
            steps {
                withCredentials([string(credentialsId: 's3_resource_bucket', variable: 'S3_BUCKET')]) {
                    sh '''
                       source ./venv/bin/activate

                       cd src/clang-19
                       git tag -a -m "First Commit" first_commit 97724f18c79c7cc81ced24239eb5e883bf1398ef || true

                       git_desc=$(git describe --match "first_commit")
                       export GIT_DISTANCE=$(echo ${git_desc} | cut -f 2 -d "-")

                       sha=$(echo ${git_desc} | cut -f 3 -d "-")
                       export GIT_SHA=${sha:1}

                       cd -

                       set -eux

                       $CXX --version
                       LLVM_REV=${GIT_DISTANCE}

                       mkdir -p $HISTORIC_COMPILER-src
                       mkdir -p $HISTORIC_COMPILER-build
                       rsync -a $SRC/$HISTORIC_COMPILER/ $HISTORIC_COMPILER-src/
                       cd $HISTORIC_COMPILER-build
                       cmake ../$HISTORIC_COMPILER-src/llvm \
                         -DCMAKE_BUILD_TYPE=Debug \
                         -DLLVM_ENABLE_PROJECTS="clang;lldb" \
                         -DLLVM_ENABLE_ASSERTIONS=Off \
                         -DLLVM_ENABLE_MODULES=Off \
                         -DLLDB_INCLUDE_TESTS=Off \
                         -DLLDB_ENABLE_PYTHON=ON \
                         -DLLDB_ENABLE_LUA=Off \
                         -DLLDB_ENABLE_LZMA=Off \
                         -DLLVM_TARGETS_TO_BUILD='X86;AArch64' \
                         -DCMAKE_EXPORT_COMPILE_COMMANDS=On \
                         -DCMAKE_C_COMPILER=$CC \
                         -DCMAKE_CXX_COMPILER=$CXX \
                         -G Ninja
                       cmake --build .
                       cd ../..
                   '''
                }
                script {
                    def LLDB = new org.swift.LLDB()
                    LLDB.LLDB_prepare("$HISTORIC_COMPILER-build/bin/debugserver")
                }
            }
        }
        stage('Run metrics') {
            environment {
               HOST_BUILD_DIR="$WORKSPACE/host-compiler"
               HISTORIC_BUILD_DIR="$WORKSPACE/clang-19-build"
            }
            steps {
                sh '''
                   ./llvm-zorg/zorg/jenkins/jobs/util/run_lldb_metrics.sh $HOST_BUILD_DIR $HISTORIC_BUILD_DIR
                '''
            }
        }

        stage('Submit statistics to LNT') {
            environment {
               HOST_BUILD_DIR="$WORKSPACE/host-compiler"
               HISTORIC_BUILD_DIR="$WORKSPACE/clang-19-build"
            }
            steps {
                sh '''
                    source ./venv/bin/activate

                    cd src/clang-19
                    git tag -a -m "First Commit" first_commit 97724f18c79c7cc81ced24239eb5e883bf1398ef || true

                    git_desc=$(git describe --match "first_commit")
                    export GIT_DISTANCE=$(echo ${git_desc} | cut -f 2 -d "-")

                    cd -

                    python llvm-zorg/zorg/jenkins/jobs/util/submit-lldb-statistics-to-lnt.py /tmp/lldb-metrics/results
                '''
            }
        }
    }
}
