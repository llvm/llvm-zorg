#!/usr/bin/env groovy
pipeline {
    parameters {
        string(name: 'LABEL', defaultValue: params.LABEL ?: 'macos-x86_64', description: 'Node label to run on')

        string(name: 'GIT_SHA', defaultValue: params.GIT_REVISION ?: '*/main', description: 'Git commit to build.')

        string(name: 'ARTIFACT', defaultValue: params.ARTIFACT ?: 'llvm.org/clang-stage1-RA/latest', description: 'Clang artifact to use')

        string(name: 'BUILD_TYPE', defaultValue: params.BUILD_TYPE ?: 'Release', description: 'Default CMake build type; one of: Release, Debug, ...')

        booleanParam(name: 'CLEAN', defaultValue: params.CLEAN ?: false, description: 'Wipe the build directory?')
    }

    agent {
        node {
            label params.LABEL
        }
    }
    stages {
        stage('Print Machine Info') {
            environment {
               PATH="$PATH:/usr/bin:/usr/local/bin"
            }
            steps {
                sh '''
                sw_vers
                xcodebuild -version
                cmake --version
                python3 --version
                '''
            }
        }
        stage('Checkout') {
            steps {
                timeout(30) {
                    dir('llvm-project') {
                        checkout([$class: 'GitSCM', branches: [
                            [name: params.GIT_SHA]
                        ], userRemoteConfigs: [
                            [url: 'https://github.com/llvm/llvm-project.git']
                        ], extensions: [
                            [$class: 'CloneOption',
                            noTags: true, timeout: 30]
                        ]])
                    }
                }
                dir('llvm-zorg') {
                    checkout([$class: 'GitSCM', branches: [
                        [name: '*/main']
                    ], extensions: [
                        [$class: 'CloneOption',
                        reference: '/Users/Shared/llvm-zorg.git']
                    ], userRemoteConfigs: [
                        [url: 'https://github.com/llvm/llvm-zorg.git']
                    ]])
                }
            }
        }
        stage('Setup Venv') {
            environment {
               PATH="$PATH:/usr/bin:/usr/local/bin"
            }
            steps {
                sh '''
                   # Non-incremental, so always delete just in case.
                   rm -rf clang-build clang-install host-compiler *.tar.gz
                   rm -rf venv
                   xcrun python3 -m venv venv
                   set +u
                   source ./venv/bin/activate
                   python -m pip install -r ./llvm-zorg/zorg/jenkins/jobs/requirements.txt
                   set -u
               '''
            }
        }
        stage('Fetch') {
            environment {
               PATH="$PATH:/usr/bin:/usr/local/bin"
            }
            steps {
                withCredentials([string(credentialsId: 's3_resource_bucket', variable: 'S3_BUCKET')]) {
                    sh """
                        source ./venv/bin/activate
                        echo "ARTIFACT=${params.ARTIFACT}"
                        python llvm-zorg/zorg/jenkins/monorepo_build.py fetch
                        ls $WORKSPACE/host-compiler/lib/clang/
                    """
                }
            }
        }
        stage('Build') {
            environment {
               PATH="$PATH:/usr/bin:/usr/local/bin"
            }
            steps {
                timeout(300) {
                    sh '''
                    set -u
                    rm -rf build.properties

                    source ./venv/bin/activate

                    cd llvm-project
                    git tag -a -m "First Commit" first_commit 97724f18c79c7cc81ced24239eb5e883bf1398ef || true

                    git_desc=$(git describe --match "first_commit")

                    export GIT_DISTANCE=$(echo ${git_desc} | cut -f 2 -d "-")

                    sha=$(echo ${git_desc} | cut -f 3 -d "-")
                    export GIT_SHA=${sha:1}

                    cd -

                    python llvm-zorg/zorg/jenkins/monorepo_build.py cmake build \
                      --cmake-build-target FileCheck \
                      --cmake-build-target count \
                      --cmake-build-target not \
                      --cmake-flag="-DLLVM_TARGETS_TO_BUILD=host" \
                      --cmake-type=Release \
                      --projects "" \
                      --noinstall \
                      --noupload

                    python llvm-zorg/zorg/jenkins/monorepo_build.py lldb-cmake build \
                      --assertions \
                      --projects="clang;lldb;cross-project-tests" \
                      --runtimes="libcxx;libcxxabi;libunwind" \
                      --cmake-flag="-DPYTHON_LIBRARY=/usr/local/Cellar/python/3.7.0/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7.dylib" \
                      --cmake-flag="-DPYTHON_INCLUDE_DIR=/usr/local/Cellar/python/3.7.0/Frameworks/Python.framework/Versions/3.7/include/python3.7m" \
                      --cmake-flag="-DPYTHON_LIBRARY_DEBUG=/usr/local/Cellar/python/3.7.0/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7.dylib" \
                      --cmake-flag="-DPYTHON_EXECUTABLE=/usr/local/Cellar/python/3.7.0/bin/python3.7" \
                      --cmake-flag="-DLLDB_USE_SYSTEM_DEBUGSERVER=ON" \
                      --cmake-flag="-DLLVM_BUILD_INSTRUMENTED_COVERAGE=ON" \
                      --cmake-flag="-DLLVM_PROFILE_MERGE_POOL_SIZE=1" \
                      --cmake-flag="-DLLVM_ENABLE_MODULES=Off" \
                      --cmake-flag="-DLLVM_TARGETS_TO_BUILD=X86;ARM;AArch64;AMDGPU;WebAssembly" \
                      --cmake-flag="-DCMAKE_EXE_LINKER_FLAGS=-Wl,-no_fixup_chains" \
                      --cmake-flag="-DCMAKE_SHARED_LINKER_FLAGS=-Wl,-no_fixup_chains" \
                      --cmake-type=Release \
                      --noupload
                    '''
                }
            }
        }
        stage('Test') {
            environment {
               PATH="$PATH:/usr/bin:/usr/local/bin"
            }
            steps {
                timeout(900) {
                    sh '''
                    set -u

                    source ./venv/bin/activate

                    rm -rf test/results.xml

                    BUILD_DIR=$(pwd)/lldb-build
                    FAST_BUILD_DIR=$(pwd)/clang-build
                    REPORT_DIR=$(pwd)/coverage-reports
                    HOST=$(pwd)/host-compiler/bin
                    LLVM_PROFDATA=$HOST/llvm-profdata
                    LLVM_COV=$HOST/llvm-cov
                    ARTIFACT_PREP_SCRIPT=$WORKSPACE/llvm-project/llvm/utils/prepare-code-coverage-artifact.py

                    FAST_TOOLS=(FileCheck count not)
                    for TOOL in ${FAST_TOOLS[@]}; do
                      cp $FAST_BUILD_DIR/bin/$TOOL $BUILD_DIR/bin/$TOOL
                    done

                    # Clear out any stale profiles.
                    rm -rf $BUILD_DIR/profiles

                    # Run the tests.
                    IGNORE_ERRORS_OVERRIDE=1 python llvm-zorg/zorg/jenkins/monorepo_build.py lldb-cmake testlong || echo "Some tests may have failed."

                    cd $BUILD_DIR
                    ninja -k 0 check-llvm check-clang || echo "Some tests may have failed."
                    cd -

                    # Temporarily exclude debugserver from the reports.
                    # It is a universal binary and the coverage report script
                    # doesn't yet know how to handle it.
                    rm -rf $BUILD_DIR/bin/debugserver

                    COV_BINARIES=$(find $BUILD_DIR/bin $BUILD_DIR/lib -depth 1 -type f -exec file {} \\; | grep Mach-O | cut -d':' -f1 | grep -vE '/(FileCheck|count|not)$' | xargs)

                    rm -rf $REPORT_DIR
                    mkdir -p $REPORT_DIR
                    python $ARTIFACT_PREP_SCRIPT $LLVM_PROFDATA $LLVM_COV $BUILD_DIR/profiles $REPORT_DIR $COV_BINARIES --unified-report --restrict $WORKSPACE/llvm-project

                    rm -rf lldb-build/profiles
                    '''
                }
            }
        }
    }

    post {
        always {
            // ToDo: Restore issue scanner
            //scanForIssues tool: clang()
            junit 'test/results.xml'
        }
        success {
            script {
                // ToDo: For now just archive coverage report as an artifact
                archiveArtifacts artifacts: "coverage-reports/**"
            }
        }
    }
}
